import argparse
import json
from collections import defaultdict
from datetime import datetime
from tabulate import tabulate


class LogAnalyzer:
    """Основной класс для анализа логов с поддержкой расширяемой архитектуры"""

    def __init__(self, file_paths, date_filter=None):
        self.logs = self._read_logs(file_paths)
        if date_filter:
            self.logs = self._filter_by_date(self.logs, date_filter)

    def _read_logs(self, file_paths):
        """Чтение и парсинг логов из файлов"""
        logs = []
        for file_path in file_paths:
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    try:
                        log = json.loads(line.strip())
                        if self._validate_log(log):
                            logs.append(log)
                    except json.JSONDecodeError:
                        continue
        return logs

    def _validate_log(self, log):
        """Базовая валидация структуры лога"""
        required_fields = {'url', 'response_time', 'timestamp'}
        return required_fields.issubset(log.keys())

    def _filter_by_date(self, logs, date_str):
        """Фильтрация логов по дате"""
        try:
            target_date = datetime.strptime(date_str, '%Y-%m-%d').date()
            return [
                log for log in logs
                if datetime.strptime(log['timestamp'], '%Y-%m-%dT%H:%M:%S%z').date() == target_date
            ]
        except ValueError:
            print(f"Invalid date format: {date_str}. Using all logs.")
            return logs

    def generate_report(self, report_type):
        """Генерация отчета по типу"""
        report_strategy = {
            'average': self._generate_average_report,
            'user_agents': self._generate_user_agents_report,
            # Можно легко добавить новые типы отчетов
        }

        if report_type not in report_strategy:
            raise ValueError(f"Unknown report type: {report_type}")

        return report_strategy[report_type]()

    def _generate_average_report(self):
        """Отчет по среднему времени ответа (базовый)"""
        endpoint_stats = defaultdict(lambda: {'count': 0, 'total_time': 0})

        for log in self.logs:
            endpoint = log['url']
            time = float(log['response_time'])
            endpoint_stats[endpoint]['count'] += 1
            endpoint_stats[endpoint]['total_time'] += time

        report = []
        for endpoint, stats in endpoint_stats.items():
            avg_time = stats['total_time'] / stats['count'] if stats['count'] else 0
            report.append({
                'endpoint': endpoint,
                'count': stats['count'],
                'avg_time': round(avg_time, 3)
            })

        return sorted(report, key=lambda x: x['endpoint'])

    def _generate_user_agents_report(self):
        """Дополнительный отчет по User-Agent (бонусный)"""
        agent_stats = defaultdict(int)

        for log in self.logs:
            agent = log.get('http_user_agent', 'Unknown')
            agent_stats[agent] += 1

        report = []
        for agent, count in sorted(agent_stats.items(), key=lambda x: x[1], reverse=True):
            report.append({
                'user_agent': agent,
                'count': count,
                'percentage': round(count / len(self.logs) * 100, 2)
            })

        return report


def print_report(report_data, report_type):
    """Вывод отчета в табличном формате"""
    if not report_data:
        print("No data available for report")
        return

    if report_type == 'average':
        headers = ['Endpoint', 'Requests', 'Avg Time (ms)']
        table = [
            [row['endpoint'], row['count'], row['avg_time']]
            for row in report_data
        ]
    elif report_type == 'user_agents':
        headers = ['User Agent', 'Requests', 'Percentage']
        table = [
            [row['user_agent'], row['count'], f"{row['percentage']}%"]
            for row in report_data
        ]

    print(tabulate(table, headers=headers, tablefmt='grid'))


def parse_args():
    """Парсинг аргументов командной строки"""
    parser = argparse.ArgumentParser(description='Log analyzer with extensible reporting')
    parser.add_argument('--file', required=True, nargs='+', help='Path to log file(s)')
    parser.add_argument('--report', choices=['average', 'user_agents'],
                        default='average', help='Type of report')
    parser.add_argument('--date', help='Filter logs by date (format: YYYY-DD-MM)')
    return parser.parse_args()


def main():
    args = parse_args()
    analyzer = LogAnalyzer(args.file, args.date)

    try:
        report_data = analyzer.generate_report(args.report)
        print_report(report_data, args.report)
    except ValueError as e:
        print(f"Error: {e}")


if __name__ == '__main__':
    main()